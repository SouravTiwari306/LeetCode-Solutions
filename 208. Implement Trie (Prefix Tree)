class Trie {
public:
struct Node {
    Node* childs[26];
    bool isEnd;
};
Node *root;
    Trie() {
        root= new Node();
        
    }
    
    void insert(string word) {
        Node *temp= root;
        for(int i=0;i<word.size();i++){
          if(temp->childs[word[i]-'a']==NULL){
              Node *newNode= new Node();
            
              temp->childs[word[i]-'a']=newNode;
          }
              temp= temp->childs[word[i]-'a'];
              if(i==word.size()-1){
                  temp->isEnd=true;
              }
          
        }
    }
    
    bool search(string word) {
        Node *curr=root;
        for(int i=0;i<word.size();i++){
          
         if(curr->childs[word[i]-'a']==NULL){
             return false;
         }
        
         curr= curr->childs[word[i]-'a'];
         
        }
        if(curr->isEnd){
            return true;
        }
        return false;
    }
    
    bool startsWith(string prefix) {
 Node *curr= root;
 for(int i=0;i<prefix.size();i++){
     if(curr->childs[prefix[i]-'a']==NULL){
         return false;
     }
     curr=curr->childs[prefix[i]-'a'];
 }
 return true;
    }
};
